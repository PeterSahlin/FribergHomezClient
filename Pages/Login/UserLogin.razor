@page "/Login/UserLogin"
@using Blazored.LocalStorage
@* @using FribergHomezClient.Models *@
@using System.Net.Http.Json
@using System.Text.Json
@using FribergHomezClient.Services.Authentication
@using FribergHomezClient.Services.Base
@using FribergHomezClient.Services.ModelService
@inject HttpClient httpClient
@inject NavigationManager navMan
@inject IJSRuntime JSRuntime
@inject IAuthenticationService authService
@inject ILocalStorageService localStorage
@inject IRealEstateAgentService realEstateAgentService



<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card" style="height:auto; padding-left:50px; padding-right:50px; padding-top:20px; padding-bottom:20px; ">
                <h3>Logga in</h3>
                <div>
                    <EditForm Model="NewLogin" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="email">Email</label>
                            <InputText class="form-control" @bind-Value="NewLogin.Email" />
                            <ValidationMessage For="@(() => NewLogin.Email)" />
                        </div>
                        <div class="form-group">
                            <label for="password">Lösenord</label>
                            <InputText class="form-control" type="password" @bind-Value="NewLogin.Password" />
                            <ValidationMessage For="@(() => NewLogin.Password)" />
                        </div>
                        <button type="submit" class="btn btn-primary btn-block mt-3" style="background-color:#4F709C; border-color:#4F709C;">Logga in</button>
                        <button type="button" class="btn btn-info btn-block mt-3" style="background-color:lightgray; border-color:lightgray;"
                                @onclick="NavigateToRegister">Registrera dig</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    public LoginDTO NewLogin { get; set; } = new LoginDTO();
    private string CurrentUser { get; set; }
    private RealEstateAgent agent { get; set; }

    public async Task HandleLogin()
    {
        string message = string.Empty;
        try
        {
            var response = await authService.AuthenticateAsync(NewLogin);
            if (response)
            {
                // Successfully authenticated, store user ID in local storage
                var userId = await localStorage.GetItemAsync<string>("userId");
                CurrentUser = userId;

                // Fetch the user details
                var agentResponse = await realEstateAgentService.GetRealEstateAgentByIdAsync(CurrentUser);
                if (agentResponse.Success)
                {
                    agent = agentResponse.Data;
                }

                // Navigate to the start page
                navMan.NavigateTo("/");

                // Refresh the component state
                StateHasChanged();
            }
            else
            {
                // Authentication failed, handle accordingly
                message = "Login failed. Please check your credentials and try again.";
            }
        }
        catch (ApiException aex)
        {
            if (aex.StatusCode >= 200 && aex.StatusCode <= 299)
            {
                navMan.NavigateTo("/");
            }
            else
            {
                // Handle specific API errors here
                message = $"Login failed: {aex.Message}";
            }
        }
        catch (Exception ex)
        {
            // Handle general exceptions
            message = $"An unexpected error occurred: {ex.Message}";
        }

        // Display the message to the user, if any
        if (!string.IsNullOrEmpty(message))
        {
            // Assuming you have a way to display messages to the user
            // e.g., a property bound to an alert in the UI
            // this.Message = message;
        }
    }
    public void NavigateToRegister()
    {
        navMan.NavigateTo("RealEstateAgent/AddRealEstateAgent");
    }

    public async Task BackButton()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
