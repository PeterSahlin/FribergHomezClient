@page "/SalesObject/ListAllSalesObjects"
@using FribergHomezClient.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager navMan
@inject IJSRuntime JSRuntime

<script>
    window.confirmDelete = function () {
        return confirm('Är du säker på att du vill ta bort detta objekt?');
    }
</script>
<div class="container">
    <h1 class="display-4">Våra bostäder</h1>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <button class="btn btn-primary" @onclick="NavigateToAddSalesObjectPage">Lägg till nytt objekt</button>
        </div>
        <div class="input-group" style="max-width: 400px;">
            <input class="form-control" placeholder="Sök..." @bind="searchItem" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchAsync">Sök</button>
            <button class="btn btn-outline-secondary" type="button" @onclick="ResetSearch">Rensa</button>
        </div>
        <div>
            <label for="municipalityDropdown" class="me-2">Välj kommun:</label>
            <select class="form-select" id="municipalityDropdown" @onchange="HandleMunicipalityChangeDropDown">
                <option value="0">Alla kommuner</option>
                @foreach (var municipality in Municipalities)
                {
                    <option value="@municipality.Id">@municipality.Name</option>
                }
            </select>
        </div>
    </div>

    @if (SaleObjects == null)
    {
        <p class="alert alert-danger">Couldn't load sale objects.</p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var item in FilteredObjects)
            {
                if (item.IsActive == true)
                {
                    <div class="col">
                        <div class="card">
                            <a href="/SalesObject/SalesObjectDetails/@item.Id">
                            <div id="carouselExampleControls_@item.Id" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-inner">
                                    @foreach (var image in item.ImageUrl)
                                    {
                                        <div class="carousel-item @(image == item.ImageUrl.First() ? "active" : "")">
                                            <img src="@image" class="d-block w-100" alt="..." />
                                        </div>
                                    }
                                </div>
@*                                 <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls_@item.Id" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls_@item.Id" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button> *@
                            </div>

                            <div class="card-body">
                                <h5 class="card-title">@item.Address</h5>
                                <p class="card-text">Utgångspris: @item.StartingPrice.ToString("N0") kr</p>
                                <p class="card-text">Rum: @item.NumberOfRooms</p>
                                <p class="card-text">Boarea: @item.LivingArea m²</p>
                                <!-- Add other details as needed -->
                            </div>
                            </a>
                                <button class="btn btn-info" @onclick="@(e => NavigateToSalesObjectDetails(item.Id))">Detaljer</button>
                                <button class="btn btn-warning" @onclick="@(e => NavigateToEditSalesObject(item.Id))">Redigera</button>
                                <button class="btn btn-danger" @onclick="@(e => NavigateToDeleteSalesObject(item.Id))">Ta bort</button>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    private string searchItem;

    public SaleObject SaleObjectToDelete;
    public List<SaleObject>? SaleObjects;
    public List<SaleObject>? FilteredObjects;
    public List<Municipality> Municipalities = new List<Municipality>();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync("/api/salesobject");
        if (response.IsSuccessStatusCode)
        {
            SaleObjects = await response.Content.ReadFromJsonAsync<List<SaleObject>>();
            FilteredObjects = SaleObjects;
        }

        var municipalityResponse = await httpClient.GetAsync("/api/municipalities");
        if (municipalityResponse.IsSuccessStatusCode)
        {
            Municipalities = await municipalityResponse.Content.ReadFromJsonAsync<List<Municipality>>();
        }
    }

    private void HandleMunicipalityChangeDropDown(ChangeEventArgs e)
    {
        var selectedMunicipalityId = Convert.ToInt32(e.Value);
        if (selectedMunicipalityId == 0)
        {
            FilteredObjects = SaleObjects;
        }
        else
        {
            FilteredObjects = SaleObjects.Where(s => s.MunicipalityId == selectedMunicipalityId).ToList();
        }
    }

    public async Task SearchAsync()
    {
        await OnInitializedAsync();
        string search = searchItem.ToLower();
        if (search == null)
        {
            FilteredObjects = SaleObjects;
        }
        FilteredObjects = SaleObjects.Where(o =>
            o.Address.ToLower().Contains(search) ||
            o.Description.ToLower().Contains(search) ||
            o.RealEstateAgent.FullName.ToLower().Contains(search)
        ).ToList();
        SaleObjects = FilteredObjects;
    }

    private async Task ResetSearch()
    {
        await OnInitializedAsync();
    }

    private void NavigateToAddSalesObjectPage()
    {
        navMan.NavigateTo("/SalesObject/AddSalesObject");
    }

    private void NavigateToSalesObjectDetails(int id)
    {
        navMan.NavigateTo($"/SalesObject/SalesObjectDetails/{id}");
    }

    private void NavigateToEditSalesObject(int id)
    {
        navMan.NavigateTo($"/SalesObject/EditSalesObject/{id}");
    }

    private async Task NavigateToDeleteSalesObject(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirmDelete"))
        {
            await httpClient.DeleteAsync($"/api/salesObject/{id}");
            await OnInitializedAsync();
        }
    }
}