@page "/SalesObject/ListAllSalesObjects"
@using FribergHomezClient.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager navMan


<img class="saleObjectImage" src="images/FribergHomezLogo.jpeg" />



<PageTitle>Våra bostäder</PageTitle>


<h1>Våra bostäder</h1>


<div>
    <button @onclick="NavigateToAddSalesObjectPage">Add New Sale Object</button>
</div>

@* <div>  <FribergHomezClient.Components.SearchBox Items="SaleObjects" OnSearch="UpdateFilteredSearchAsync"></FribergHomezClient.Components.SearchBox> </div> *@




@* <div>  <FribergHomezClient.Components.SearchBox Items="SaleObjects" OnSearch="UpdateFilteredSearchAsync"></FribergHomezClient.Components.SearchBox> </div> *@

<input class="form-control" style="max-width:600px" placeholder="Sök..."
       @bind="searchItem" />

<button @onclick=SearchAsync>
    Sök
</button>
<button @onclick=ResetSearch>
    Rensa
</button>


<div>
    <label for="municipalityDropdown">Välj kommun: </label>
    <select id="municipalityDropdown" @onchange="HandleMunicipalityChangeDropDown">
        <option value="0">Alla kommuner</option>
        @foreach (var municipality in Municipalities)
        {
            <option value="@municipality.Id">@municipality.Name</option>
        }
    </select>
</div>


@if (SaleObjects == null)
{
    <p> Couldn't load sale objects.</p>
}

else
{
    <table>
        <thead>
            <tr>
                <th>Adress</th>
                <th>Utgångspris</th>
                <th>Boarea</th>
                <th>Biarea</th>
                <th>Tomtarea</th>
                <th>Beskrivning</th>
                <th>Antal rum</th>
                <th>Månadskostnad</th>
                <th>Årskostnad</th>
                <th>Byggår</th>
                <th>Bilder</th>
                <th>Mäklare</th>
                <th>Kategori</th>
                <th>Kommun</th>
                <th>Detaljer</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in FilteredObjects)
            {
                if (item.IsActive == true)
                {
                    
                <tr>
                    <td>@item.Address</td>
                    <td>@item.StartingPrice</td>
                    <td>@item.LivingArea</td>
                    <td>@item.AncillaryArea</td>
                    <td>@item.PlotArea</td>
                    <td>@item.Description</td>
                    <td>@item.NumberOfRooms</td>
                    <td>@item.MonthlyFee</td>
                    <td>@item.OperatingCostPerYear</td>
                    <td>@item.YearOfConstruction</td>
                    <td>@item.RealEstateAgent.FirstName @item.RealEstateAgent.LastName</td>

                    <td>
                        @foreach (var image in item.ImageUrl)
                        {
                            <img class="saleObjectImage" src=@image />
                        }
                    </td>
                    <td>@item.Category.Name</td>
                    <td>@item.Municipality.Name</td>
                    <td><button @onclick="@(e => NavigateToSalesObjectDetails(item.Id))">Detaljer</button></td>
                    <td><button @onclick="@(e => NavigateToEditSalesObject(item.Id))">Redigera</button></td>
                    <td><button @onclick="@(e => NavigateToDeleteSalesObject(item.Id))">Ta bort</button></td>
                </tr>
                }
            }
        </tbody>
    </table>
}


@code {

    private string searchItem;

    public SaleObject SaleObjectToDelete;

    public List<SaleObject>? SaleObjects;

    public List<SaleObject>? FilteredObjects;

    public List<Municipality> Municipalities = new List<Municipality>();

    protected override async Task OnInitializedAsync()
    {

        var response = await httpClient.GetAsync("/api/salesobject");
        if (response.IsSuccessStatusCode)
        {
            SaleObjects = await response.Content.ReadFromJsonAsync<List<SaleObject>>();

            FilteredObjects = SaleObjects;


        }
        var municipalityResponse = await httpClient.GetAsync("/api/municipalities");
        if (municipalityResponse.IsSuccessStatusCode)
        {
            Municipalities = await municipalityResponse.Content.ReadFromJsonAsync<List<Municipality>>();
        }
    }
    private void HandleMunicipalityChangeDropDown(ChangeEventArgs e)
    {
        var selectedMunicipalityId = Convert.ToInt32(e.Value);
        if (selectedMunicipalityId == 0)
        {
            FilteredObjects = SaleObjects;
        }
        else
        {
            FilteredObjects = SaleObjects.Where(s => s.MunicipalityId == selectedMunicipalityId).ToList();

        }
    }

    //Peter
    public async Task SearchAsync()
    {
        await OnInitializedAsync();

        string search = searchItem.ToLower();

        if (search == null)
        {
            FilteredObjects = SaleObjects;

        }
        FilteredObjects = SaleObjects.Where(o =>
            o.Address.ToLower().Contains(search) ||
            o.Description.ToLower().Contains(search) ||
            o.RealEstateAgent.FullName.ToLower().Contains(search)
            ).ToList();
        SaleObjects = FilteredObjects;

    }


    private async Task ResetSearch()
    {
        await OnInitializedAsync();
    }

    private void NavigateToAddSalesObjectPage()
    {
        navMan.NavigateTo("/SalesObject/AddSalesObject");

    }
    private void NavigateToSalesObjectDetails(int id)
    {
        navMan.NavigateTo($"/SalesObject/SalesObjectDetails/{id}");
    }
    private void NavigateToEditSalesObject(int id)
    {
        navMan.NavigateTo($"/SalesObject/EditSalesObject/{id}");
    }

    private async Task NavigateToDeleteSalesObject(int id)
    {
        await httpClient.DeleteAsync($"/api/salesObject/{id}");
        await OnInitializedAsync();
    }
}



