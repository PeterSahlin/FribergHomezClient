@page "/SalesObject/AddSalesObject"
@* @using FribergHomezClient.Models *@
@using System.Net.Http.Json
@using FribergHomezClient.Services.Base
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager navMan
@inject ISaleObjectService saleObjectService
@using FribergHomezClient.Services.ModelService




<h3>Lägg till nytt objekt</h3>

<div class="row mb-3">
    <div class="col-md-3">
        <input type="text" class="form-control" placeholder="Adress" @bind="newAddress" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Utgångspris" @bind="newStartingPrice" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Boarea" @bind="newLivingArea" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Biarea" @bind="newAncillaryArea" />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Tomtarea" @bind="newPlotArea" />
    </div>
    <div class="col-md-3">
        <input type="text" class="form-control" placeholder="Beskrivning" @bind="newDescription" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Antal rum" @bind="newNumberOfRooms" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Månadsavgift" @bind="newMonthlyFee" />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Årsavgift" @bind="newOperatingCostPerYear" />
    </div>
    <div class="col-md-3">
        <input type="number" class="form-control" placeholder="Byggår" @bind="newYearOfConstruction" />
    </div>
    <div class="col-md-3">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Bildurl" @bind="addNewImgUrl" />
            <button type="button" class="btn btn-primary" style="background-color:#4F709C; border-color:#4F709C;" @onclick="AddImgUrl">Lägg till bild</button>
        </div>
        @if (showPopup)
        {
            <div class="popup">
                <span class="popuptext">Bild tillagd!</span>
            </div>
        }
    </div>
    <div class="col-md-3"></div>
</div>
<div>
    
    <select class="btn btn-secondary btn-sm dropdown-toggle mt-3 mb-1" id="categoryDropDown" placeholder="Kategori" @bind="newCategoryId">
        <option>Välj kategori</option>
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>
</div>
<div>

    <select class="btn btn-secondary btn-sm dropdown-toggle mt-3 mb-1" id="realEstateAgentDropDown" placeholder="Mäklare" @bind="newRealEstateId">
        <option>Välj mäklare</option>
        @foreach (var agent in RealEstateAgents)
        {
            <option value="@agent.Id">@agent.FirstName @agent.LastName</option>
        }
    </select>
</div>
<div>

    <select class="btn btn-secondary btn-sm dropdown-toggle mt-3 mb-1" id="municipalityDropDown" placeholder="Kommun" @bind="newMunicipalityId">
        <option>Välj kommun</option>
        @foreach (var municipality in Municipalities)
        {
            <option value="@municipality.Id">@municipality.Name</option>
        }
    </select>
</div>
<div class="row mb-3">
    @foreach (var imageUrl in newImgUrl)
    {
        <div class="col-md-3 mb-3">
            <div class="image-container">
                <img class="img-fluid" src="@imageUrl" alt="Image" />
                <button type="button" class="btn btn-danger btn-sm mt-2"  style="background-color:#B73E3E; border-color:#B73E3E;" @onclick="() => RemoveImgUrl(imageUrl)">Remove</button>
            </div>
        </div>
    }
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <button class="btn btn-success me-2" style="background-color:#4F6F52; border-color:#4F6F52;" @onclick="AddNewSaleObject">Spara</button>
        <button class="btn btn-danger" style="background-color:#B73E3E; border-color:#B73E3E;" @onclick="ReturnToPreviousPage">Avbryt</button>
    </div>
</div>
@code {
    private string newAddress = "";
    private int? newStartingPrice;
    private int? newLivingArea;
    private int? newAncillaryArea;
    private int? newPlotArea;
    private string newDescription = "";
    private int? newNumberOfRooms;
    private int? newMonthlyFee;
    private int? newOperatingCostPerYear;
    private int? newYearOfConstruction;
    private int newCategoryId;
    private int newMunicipalityId;
    private string? newRealEstateId;
    public List<string> newImgUrl = new List<string>();
    private string addNewImgUrl;
    private bool showPopup = false;

    public List<Category>? Categories = new List<Category>();
    public List<Municipality>? Municipalities = new List<Municipality>();
    public List<RealEstateAgent>? RealEstateAgents = new List<RealEstateAgent>();

    protected override async Task OnInitializedAsync()
    {
        var categoryResponse = await httpClient.GetAsync("/api/Category");
        if (categoryResponse.IsSuccessStatusCode)
        {
            Categories = await categoryResponse.Content.ReadFromJsonAsync<List<Category>>();
        }
        var municipalityResponse = await httpClient.GetAsync("/api/municipalities");
        if (municipalityResponse.IsSuccessStatusCode)
        {
            Municipalities = await municipalityResponse.Content.ReadFromJsonAsync<List<Municipality>>();
        }
        var agentResponse = await httpClient.GetAsync("/api/RealEstateAgent");
        if (agentResponse.IsSuccessStatusCode)
        {
            RealEstateAgents = await agentResponse.Content.ReadFromJsonAsync<List<RealEstateAgent>>();
        }
    }

    private async Task AddNewSaleObject()
    {
        var newSaleObject = new SalesObjectDto
            {
                Address = newAddress,
                StartingPrice = newStartingPrice ?? 0,
                LivingArea = newLivingArea ?? 0,
                AncillaryArea = newAncillaryArea ?? 0,
                PlotArea = newPlotArea ?? 0,
                Description = newDescription,
                NumberOfRooms = newNumberOfRooms ?? 0,
                MonthlyFee = newMonthlyFee ?? 0,
                OperatingCostPerYear = newOperatingCostPerYear ?? 0,
                YearOfConstruction = newYearOfConstruction ?? 0,
                CategoryId = newCategoryId,
                MunicipalityId = newMunicipalityId,
                RealEstateAgentId = newRealEstateId,
                ImageUrl = newImgUrl
            };

        try
        {
            await saleObjectService.CreateSaleObjectAsync(newSaleObject);
            navMan.NavigateTo("/SalesObject/ListAllSalesObjects");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Kunde inte lägga till objekt", ex);
        }
    }
    private async void AddImgUrl()
    {
        if (!string.IsNullOrEmpty(addNewImgUrl))
        {
            newImgUrl.Add(addNewImgUrl);
            addNewImgUrl = string.Empty;
            showPopup = true;
            await Task.Delay(1000);
            showPopup = false;
            StateHasChanged();
        }
    }
    private void ReturnToPreviousPage()
    {
        navMan.NavigateTo("/SalesObject/ListAllSalesObjects");
    }
    private void RemoveImgUrl(string imageUrl)
    {
        newImgUrl.Remove(imageUrl);
    }
}

<style>
    .popup {
        position: fixed;
        bottom: 50px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #f1f1f1;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        z-index: 9999;
    }

        .popup .popuptext {
            color: #333;
        }
</style>