@page "/SalesObject/EditSalesObject/{Id:int}"
@using FribergHomezClient.Models
@inject NavigationManager navMan
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient httpClient

<h3>Redigera försäljningsobjekt</h3>
@if (saleObject != null)
{
    <form @onsubmit="UpdateSaleObject">
        <div>
            <input type="text" id="address" class="form-control" placeholder="Adress" @bind="saleObject.Address" required />
        </div>
        <div>
            <input type="number" id="startingPriceInput" class="form-control" placeholder="Utgångspris" @bind="saleObject.StartingPrice" />
        </div>
        <div>
            <input type="number" id="LivingAreaInput" class="form-control" placeholder="Boarea" @bind="saleObject.LivingArea" />
        </div>
        <div>
            <input type="number" id="newAncillaryAreaInput" class="form-control" placeholder="Biarea" @bind="saleObject.AncillaryArea" />
        </div>
        <div>
            <input type="number" id="newPlotAreaInput" class="form-control" placeholder="Tomtarea" @bind="saleObject.PlotArea" />
        </div>
        <div>
            <textarea id="newDescriptionInput" class="form-control" placeholder="Beskrivning" @bind="saleObject.Description" rows="3"></textarea>
        </div>
        <div>
            <input type="number" id="newNumberOfRoomsInput" class="form-control" placeholder="Antal rum" @bind="saleObject.NumberOfRooms" />
        </div>
        <div>
            <input type="number" id="newMonthlyFeeInput" class="form-control" placeholder="Månadsavgift" @bind="saleObject.MonthlyFee" />
        </div>
        <div>
            <input type="number" id="newOperatingCostPerYearInput" class="form-control" placeholder="Årsavgift" @bind="saleObject.OperatingCostPerYear" />
        </div>
        <div>
            <input type="number" id="newYearOfConstructionInput" class="form-control" placeholder="Byggår" @bind="saleObject.YearOfConstruction" />
        </div>
        <div>
            <select id="categoryDropdown" class="form-select" placeholder="Kategori" @bind="saleObject.CategoryId">
                <option value="">Välj kategori</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>

        <div>
            <select id="municipalityDropdown" class="form-select" placeholder="Kommun" @bind="saleObject.MunicipalityId">
                <option value="">Välj kommun</option>
                @foreach (var municipality in Municipalities)
                {
                    <option value="@municipality.Id">@municipality.Name</option>
                }
            </select>
        </div>

        <div>
            <select id="realEstateAgentDropdown" class="form-select" placeholder="Mäklare" @bind="saleObject.RealEstateAgentId">
                <option value="">Välj mäklare</option>
                @foreach (var agent in RealEstateAgents)
                {
                    <option value="@agent.Id">@agent.FirstName @agent.LastName</option>
                }
            </select>
        </div>
        <div class="row">
            @foreach (var image in saleObject.ImageUrl)
            {
                <div class="col-md-3 mb-3">
                    <div class="image-container">
                        <img class="saleObjectImage img-fluid" src=@image />
                        <button type="button" class="btn btn-danger btn-sm mt-2" @onclick="() => RemoveImgUrl(image)">Remove</button>
                    </div>
                </div>
            }
        </div>
        <div>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Bildurl" @bind="addNewImgUrl" />
                <button type="button" class="btn btn-primary" @onclick="AddImgUrl">Lägg till bild</button>
            </div>
            @if (showPopup)
            {
                <div class="popup">
                    <span class="popuptext">Bild tillagd!</span>
                </div>
            }
        </div>
        <div>
            <button type="submit" class="btn btn-success">Spara</button>
            <button type="button" class="btn btn-danger" @onclick="ReturnToListAll">Avbryt</button>
        </div>
    </form>
}
@code {


    public SaleObject saleObject = new SaleObject();
    public SaleObject newSaleObject;
    [Parameter]
    public int Id { get; set; }
    public List<Category>? Categories = new List<Category>();
    public List<Municipality>? Municipalities = new List<Municipality>();
    public List<RealEstateAgent>? RealEstateAgents = new List<RealEstateAgent>();
    public List<string> newImgUrl = new List<string>();
    private string addNewImgUrl;
    private bool showPopup = false;


    protected override async Task OnInitializedAsync()
    {
        var saleObjectResponse = await httpClient.GetAsync($"/api/SalesObject/{Id}");
        if (saleObjectResponse.IsSuccessStatusCode)
        {
            saleObject = await saleObjectResponse.Content.ReadFromJsonAsync<SaleObject>();
        }
        var categoryResponse = await httpClient.GetAsync("/api/Category");
        if (categoryResponse.IsSuccessStatusCode)
        {
            Categories = await categoryResponse.Content.ReadFromJsonAsync<List<Category>>();
        }
        var municipalityResponse = await httpClient.GetAsync("/api/municipalities");
        if (municipalityResponse.IsSuccessStatusCode)
        {
            Municipalities = await municipalityResponse.Content.ReadFromJsonAsync<List<Municipality>>();
        }
        var agentResponse = await httpClient.GetAsync("/api/RealEstateAgent");
        if (agentResponse.IsSuccessStatusCode)
        {
            RealEstateAgents = await agentResponse.Content.ReadFromJsonAsync<List<RealEstateAgent>>();
        }
    }
    private async void AddImgUrl()
    {
        if (!string.IsNullOrEmpty(addNewImgUrl))
        {
            newImgUrl.Add(addNewImgUrl);
            addNewImgUrl = string.Empty;
            showPopup = true;
            await Task.Delay(1000);
            showPopup = false;
            StateHasChanged();
        }
    }
    private async Task UpdateSaleObject()
    {
        newSaleObject = saleObject;
        try
        {
            var response = await httpClient.PutAsJsonAsync($"/api/salesobject", newSaleObject); 
            if (response.IsSuccessStatusCode)
            {
                navMan.NavigateTo("/SalesObject/ListAllSalesObjects");
            }
            else
            {
                Console.WriteLine("Kunde inte lägga till objekt");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    private void RemoveImgUrl(string imageUrl)
    {
        saleObject.ImageUrl.Remove(imageUrl);
    }
    private void ReturnToListAll()
    {
        navMan.NavigateTo("/SalesObject/ListAllSalesObjects");
    }
}
<style>
    .saleObjectImage {
        max-width: 100px;
        height: auto;
    }

    .popup {
        position: fixed;
        bottom: 50px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #f1f1f1;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        z-index: 9999;
    }

        .popup .popuptext {
            color: #333;
        }
</style>
