@page "/SalesObject/EditSalesObject/{Id:int}"
@using FribergHomezClient.Models
@inject NavigationManager navMan
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient httpClient

<h3>Redigera försäljningsobjekt</h3>
   @if (saleObject != null)
{
    <form @onsubmit="UpdateSaleObject">
        <div>
            <label for="Address">Adress:</label>
            <input type="text" id="address" @bind="saleObject.Address" required />
        </div>
        <div>
            <label for="startingPriceInput">Utgångspris:</label>
            <input type="number" id="startingPriceInput" @bind="saleObject.StartingPrice" />
        </div>
        <div>
            <label for="LivingAreaInput">Boarea:</label>
            <input type="number" id="LivingAreaInput" @bind="saleObject.LivingArea" />
        </div>
        <div>
            <label for="newAncillaryAreaInput">Biarea:</label>
            <input type="number" id="newAncillaryAreaInput" @bind="saleObject.AncillaryArea" />
        </div>
        <div>
            <label for="newPlotAreaInput">Tomtarea:</label>
            <input type="number" id="newPlotAreaInput" @bind="saleObject.PlotArea" />
        </div>
        <div>
            <label for="newDescriptionInput">Beskrivning:</label>
            <input type="text" id="newDescriptionInput" @bind="saleObject.Description" />
        </div>
        <div>
            <label for="newNumberOfRoomsInput">Antal rum:</label>
            <input type="number" id="newNumberOfRoomsInput" @bind="saleObject.NumberOfRooms" />
        </div>
        <div>
            <label for="newMonthlyFeeInput">Månadsavgift:</label>
            <input type="number" id="newMonthlyFeeInput" @bind="saleObject.MonthlyFee" />
        </div>
        <div>
            <label for="newOperatingCostPerYearInput">Årsavgift:</label>
            <input type="number" id="newOperatingCostPerYearInput" @bind="saleObject.OperatingCostPerYear" />
        </div>
        <div>
            <label for="newYearOfConstructionInput">Byggår:</label>
            <input type="number" id="newYearOfConstructionInput" @bind="saleObject.YearOfConstruction" />
        </div>
        <div>
            @foreach (var image in saleObject.ImageUrl)
            {
                <img class="saleObjectImage" src=@image />
            }
        </div>
         <div>
    <input type="text" @bind="addNewImgUrl" />
            <button @onclick="AddImgUrl">Lägg till bild</button>
        </div>
        <div>
            <label for="categoryDropdown">Kategori:</label>
            <select id="categoryDropdown" @bind="saleObject.CategoryId">
                <option value="">Select Category</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="municipalityDropdown">Kommun:</label>
            <select id="municipalityDropdown" @bind="saleObject.MunicipalityId">
                <option value="">Välj kommun</option>
                @foreach (var municipality in Municipalities)
                {
                    <option value="@municipality.Id">@municipality.Name</option>
                }
            </select>
        </div>

        <div>
            <label for="realEstateAgentDropdown">Mäklare:</label>
            <select id="realEstateAgentDropdown" @bind="saleObject.RealEstateAgentId">
                <option value="">Välj mäklare</option>
                @foreach (var agent in RealEstateAgents)
                {
                    <option value="@agent.Id">@agent.FirstName @agent.LastName</option>
                }
            </select>
        </div>
        <div>
            <button type="submit">Spara</button>
        </div>
    </form>
  
}
@code {


    public SaleObject saleObject = new SaleObject();
    public SaleObject newSaleObject;
    [Parameter]
    public int Id { get; set; }
    public string addNewImgUrl;
    public List<Category>? Categories = new List<Category>();
    public List<Municipality>? Municipalities = new List<Municipality>();
    public List<RealEstateAgent>? RealEstateAgents = new List<RealEstateAgent>();


    protected override async Task OnInitializedAsync()
    {
        var saleObjectResponse = await httpClient.GetAsync($"/api/SalesObject/{Id}");
        if (saleObjectResponse.IsSuccessStatusCode)
        {
            saleObject = await saleObjectResponse.Content.ReadFromJsonAsync<SaleObject>();
        }
        var categoryResponse = await httpClient.GetAsync("/api/Category");
        if (categoryResponse.IsSuccessStatusCode)
        {
            Categories = await categoryResponse.Content.ReadFromJsonAsync<List<Category>>();
        }
        var municipalityResponse = await httpClient.GetAsync("/api/municipalities");
        if (municipalityResponse.IsSuccessStatusCode)
        {
            Municipalities = await municipalityResponse.Content.ReadFromJsonAsync<List<Municipality>>();
        }
        var agentResponse = await httpClient.GetAsync("/api/RealEstateAgent");
        if (agentResponse.IsSuccessStatusCode)
        {
            RealEstateAgents = await agentResponse.Content.ReadFromJsonAsync<List<RealEstateAgent>>();
        }
    }
    private void AddImgUrl()
    {
        if (!string.IsNullOrEmpty(addNewImgUrl))
        {
            saleObject.ImageUrl.Add(addNewImgUrl);
            addNewImgUrl = string.Empty;
        }
    }
    private async Task UpdateSaleObject()
    {
        newSaleObject = saleObject;
        try
        {
            var response = await httpClient.PutAsJsonAsync($"/api/salesobject", newSaleObject); 
            if (response.IsSuccessStatusCode)
            {
                navMan.NavigateTo("/SaleObject/ListAllSalesObjects");
            }
            else
            {
                Console.WriteLine("Kunde inte lägga till objekt");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
