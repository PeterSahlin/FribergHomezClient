@page "/RealEstateAgent/EditRealEstateAgent/{Id:guid}"
@using System.Net.Http.Json
@using System.Text.Json
@using FribergHomezClient.Services.Base
@using FribergHomezClient.Services.ModelService
@inject HttpClient httpClient
@inject NavigationManager navMan
@inject IRealEstateAgentService realEstateAgentService
@inject IFirmService firmService
@inject IJSRuntime JSRuntime

@*Peter*@
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <br />
            <h3>Redigera @CurrentRealEstateAgent.FirstName @CurrentRealEstateAgent.LastName</h3>

            <div class="card" style="height:auto; padding-left:50px; padding-right:50px; padding-top:20px; padding-bottom:20px; ">
                <div style="display: flex; justify-content: center; align-items: center;">
                    <img src="@CurrentRealEstateAgent.ImageUrl" class="card-img" alt="@CurrentRealEstateAgent.FirstName @CurrentRealEstateAgent.LastName" style="width:220px;" />
                </div>
                <form @onsubmit="@(e => {UpdateStatus(StatusValue); EditRealEstateAgentAsync();  })">
                    <div>

                        <input type="text" id="firstname" class="form-control mb-3 mt-3" placeholder="Förnamn" @bind="@CurrentRealEstateAgent.FirstName" />
                    </div>
                    <div>

                        <input type="text" id="lastname" class="form-control mb-3" placeholder="Efternamn" @bind="@CurrentRealEstateAgent.LastName" />
                    </div>
                    <div>

                        <input type="text" id="email" class="form-control mb-3" placeholder="E-post" @bind="@CurrentRealEstateAgent.Email" />
                    </div>
                    <div>
                        <input type="text" id="phonenumber" class="form-control mb-3" placeholder="Telefonnummer" @bind="@CurrentRealEstateAgent.PhoneNumber" />
                    </div>

                    <div>

                        <div class="image-container mb-3">
                            <img class="saleObjectImage img-fluid" src=@CurrentRealEstateAgent.ImageUrl style="width:50px;" />
                            <button type="button" class="btn btn-danger btn-sm mt-2" @onclick="() => RemoveImgUrl()">Remove</button>
                        </div>

                    </div>
                    <div>
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Bildurl" @bind="AddNewImgUrl" />
                            <button type="button" class="btn btn-primary" @onclick="AddImgUrl">Lägg till bild</button>
                        </div>
                        @if (showPopup)
                        {
                            <div class="popup">
                                <span class="popuptext">Bild tillagd!</span>
                            </div>
                        }
                    </div>


                    <div>
                        <label for="firmDropDown">Mäklarfirma:</label>
                        <select id="firmDropDown" class="btn btn-secondary btn-sm dropdown-toggle mt-3 mb-3" @bind="@CurrentRealEstateAgent.FirmId">
                            <option>Välj mäklarfirma</option>
                            @foreach (var firm in FirmList)
                            {
                                <option value="@firm.Id">@firm.Name</option>
                            }
                        </select>
                    </div>


                    <div class="row mb-3">
                        <div class="col-auto">
                            <input class="btn-check mb-3" type="radio" id="activeRadio" name="status" value="1" @onclick="@(e => StatusValue = 1)">
                            <label class="btn btn-outline-success btn-sm" for="activeRadio">Aktiv</label>
                        </div>
                        <div class="col-auto">
                            <input type="radio" class="btn-check" id="inactiveRadio" name="status" value="0" @onclick="@(e => StatusValue = 0)">
                            <label class="btn btn-outline-danger btn-sm" for="inactiveRadio">Inaktiv</label>
                        </div>
                    </div>

                    @if (showStatusPopup)
                    {

                        <div class="popup">
                            <span class="popuptext" style="color:red;">Du måste göra ett val.</span>
                        </div>
                    }



                    <br />
                    <button class="btn btn-success" type="submit">Spara</button>
                    <button class="btn btn-danger" @onclick="BackButton">Avbryt</button>
                </form>
            </div>



        </div>
    </div>
</div>



@code {
    //PROPERTIES
    [Parameter]

    public Guid Id { get; set; }
    public RealEstateAgent CurrentRealEstateAgent { get; set; } = new RealEstateAgent();
    public RealEstateAgent UpdatedRealEstateAgent { get; set; } = new RealEstateAgent();
    public List<Firm> FirmList { get; set; } = new List<Firm>();
    public int statusDropDown { get; set; }
    public required int StatusValue { get; set; } = 2;
    public string AddNewImgUrl { get; set; }
    private bool showPopup = false;
    private bool showStatusPopup = false;




    protected override async Task OnInitializedAsync()
    {
        //set current real estate agent
        Response<RealEstateAgent> response = await realEstateAgentService.GetRealEstateAgentByIdAsync(Id.ToString());
        if (response.Success)
        {
            CurrentRealEstateAgent = response.Data;
        }
        else
        {
            Console.WriteLine("Couldn't set Current Real Estate Agent from database.");
        }


        //get firms
        Response<List<Firm>> firmResponse = await firmService.GetFirmsAsync();
        if (response.Success)
        {
            FirmList = firmResponse.Data;
        }
        else
        {
            Console.WriteLine("Couldn't get Firms from database.");
        }
    }


    public async Task EditRealEstateAgentAsync()
    {

        @if (StatusValue == 2)
        {
            showStatusPopup = true;
            await Task.Delay(1000);
            showStatusPopup = false;
            return;
        }

        UpdatedRealEstateAgent = CurrentRealEstateAgent;
        try
        {
            await realEstateAgentService.UpdateRealEstateAgentAsync(UpdatedRealEstateAgent);
            navMan.NavigateTo("/RealEstateAgent/ListAllRealEstateAgents");

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
        }
    }

    public void UpdateStatus(int value)
    {

        if (value == 0)
        {
            CurrentRealEstateAgent.IsActive = false;
        }
        else if (value == 1)
        {
            CurrentRealEstateAgent.IsActive = true;
        }
    }

    private async void AddImgUrl()
    {
        if (!string.IsNullOrEmpty(AddNewImgUrl))
        {
            CurrentRealEstateAgent.ImageUrl = AddNewImgUrl;
            showPopup = true;
            await Task.Delay(1000);
            showPopup = false;
            StateHasChanged();
        }
    }

    private void RemoveImgUrl()
    {
        CurrentRealEstateAgent.ImageUrl = "";
    }

    public async Task BackButton()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
