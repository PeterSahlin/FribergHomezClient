@page "/Municipality/ListAllMunicipalities"
@* @using FribergHomezClient.Models *@
@using System.Net.Http.Json
@using System.Text.Json
@using FribergHomezClient.Services.ModelService
@using FribergHomezClient.Services.Base
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject NavigationManager navMan
@inject IJSRuntime JSRuntime
@inject IMunicipalityService municipalityService

<PageTitle>Kommuner</PageTitle>

<div class="container">
    <h1 class="display-4">Kommuner</h1>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <button class="btn btn-primary" @onclick="NavigateToAddMunicipality">Lägg till kommun</button>
        </div>
        <div class="input-group" style="max-width: 400px;">
            <input class="form-control" placeholder="Sök..." @bind="searchItem" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchAsync">Sök</button>
            <button class="btn btn-outline-secondary" type="button" @onclick="ResetSearch">Rensa</button>
        </div>
    </div>

    @if (Municipalities == null)
    {
        <p> Couldn't load municipalities.</p>
    }
    else
    {
        <thead>
            <tr>
                <th>Namn</th>
            </tr>
        </thead>
        @foreach (var item in FilteredMunicipalities)
        {
            <div class="card mb-3">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">@item.Name</h5>
                    <div>
                        <button class="btn btn-warning mr-2" @onclick="@(e => NavigateToEditMunicipality(item.Id))">Redigera</button>
                        <button class="btn btn-danger" @onclick="@(e => NavigateToDeleteMunicipality(item.Id))">Ta bort</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {

    private string searchItem;

    public List<Municipality> Municipalities = new List<Municipality>();
    public List<Municipality> FilteredMunicipalities = new List<Municipality>();

    protected override async Task OnInitializedAsync()
    {
        Response<List<Municipality>> response = await municipalityService.GetMunicipalitiesAsync();

        Municipalities = response.Data;

        FilteredMunicipalities = new List<Municipality>(Municipalities);
    }

    public async Task SearchAsync()
    {
        await OnInitializedAsync();

        string search = searchItem.ToLower();

        if (search == null)
        {
            FilteredMunicipalities = Municipalities;

        }
        FilteredMunicipalities = Municipalities.Where(m =>
            m.Name.ToLower().Contains(search)
            ).ToList();
        Municipalities = FilteredMunicipalities;

    }


    private async Task ResetSearch()
    {
        await OnInitializedAsync();
    }
    private void NavigateToAddMunicipality()
    {
        navMan.NavigateTo("/Municipality/AddMunicipality");

    }
    private void NavigateToMunicipalityDetails(int id)
    {
        navMan.NavigateTo($"/Municipality/MunicipalityDetails/{id}");
    }
    private void NavigateToEditMunicipality(int id)
    {
        navMan.NavigateTo($"/Municipality/EditMunicipality/{id}");
    }

    private async Task NavigateToDeleteMunicipality(int id)
    {
        await httpClient.DeleteAsync($"/api/municipalities/{id}");
        await OnInitializedAsync();
    }
}

